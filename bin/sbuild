#!/bin/bash

set -e

script_name=$(basename "$0")
container_name="dev-focal"
cores="4"
cmake_type="Debug"
user="$(id --user --name)"
env_file="$HOME/.config/swarmfarm/swarmbot_build_env"

default_local_hosts="localhost/4"
default_dist_cores="16"
#default_dist_hosts=$'localhost/4\n192.168.50.21/6\n192.168.50.22/6'
default_dist_hosts=$'localhost/4\n192.168.50.21/6'

hosts="$default_local_hosts"

function print_help {
    echo "Builds swarmbot - Lippy style. This means nspawn isolated environments"
    echo "Primarily intended at confident Linux users who understand cmake, catkin, distcc, ccache and nspawn"
    echo "All arguments are position independent"
    echo ""
    echo "Arguments"
    echo ""
    echo " What to build"
    echo "   -p | --package {PACKAGE}                    the package to build - appended to catkin_make as '--pkg {PACKAGE}'. Default builds everything"
    echo "   -o | --only {PACKAGE[,PACKAGE](:FILE.cpp)}  build a single package or file in isolation"
    echo "                                               For packages specify a package name or multiple, with , seperation. Uses CATKIN_WHITELIST_PACKAGES to skip all deps"
    echo "                                               For a single file - do package then filename in src dir with : inbetween. Does not work with other build options"
    echo "   -t | --tests                                whether to build tests"
    echo "        --install                              Whether to do an install"
    echo "        --debug | --release "
    echo "        --cmake-type {TYPE} "
    echo "                                         the CMAKE_BUILD_TYPE. Defaults to Debug"
    echo ""
    echo " How to build it"
    echo "   -c | --cores {CORES}           the amount of cores to use. Defaults to 6, and ups to 16 automatically if --dist is specified"
    echo "   -d | --dist                    use a distributed build. This is hardcoded around the Bendee distcc config"
    echo "   -h | --hosts {HOSTS}           the distcc hosts to use. Defaults to the bendee standard. This argument requires newline seperation ala the hosts config file for distcc"
    echo "   -e | --env-file {FILE}         an environment file to source before building. This can be a systemd EnvironmentFile or a bash file"
    echo "                                  Defaults to ~/.swarmbot_build_env"
    echo "        --no-env                  Turns off environment file sourcing"
    echo "        --no-colour|--no-color    Turns off colouring in catkin - good for shell piping"
    echo "        --verbose                 With extra output from the builder"
    echo ""
    echo " Where to build it"
    echo "   -u | --user {NAME}             the user to run as inside the container. Defaults to the current user"
    echo "   -n | --container-name {NAME}   the container to build into. Defaults to ${container_name}. Expects no user-namespacing inside the container - use -u if this is not the case"
	echo "        --gcc {VERSION}           GCC version to use"
    echo "        --help                    print this help text"
    echo "        --dry-run                 prints extra debugging info to tell what is going wrong"
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -c|--cores)
        if [ -z "$seen_cores" ]; then
            shift
            cores="$1"
            seen_cores="yes"
            shift # past argument
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -d|--dist)
        if [ -z "$seen_dist" ]; then
            seen_dist="yes"
            # Bump cores if not manually specified
            if [ -z "$seen_cores" ]; then
                cores="16"
            fi
            if [ -z "$seen_hosts" ]; then
                hosts="$default_dist_hosts"
            fi
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -n|--container-name)
        if [ -z "$seen_name" ]; then
            shift
            container_name="$1"
            seen_name="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --debug|--release|--cmake-type)
        if [ -z "$seen_type" ]; then
            if [[ "$1" == "--debug" ]]; then
                cmake_type="Debug"
            elif [[ "$1" == "--release" ]]; then
                cmake_type="Release"
            else
                shift
                cmake_type="$1"
            fi
            seen_type="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --install)
        if [ -z "$install" ]; then
            install="install"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -h|--hosts)
        if [ -z "$seen_hosts" ]; then
            shift
            hosts="$1"
            seen_hosts="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -u|--user)
        if [ -z "$seen_user" ]; then
            shift
            user="$1"
            seen_user="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
	--gcc)
		if [ -z "$gcc" ]; then
            shift
            gcc="$1"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -e|--env-file)
        if [ -z "$seen_env" ]; then
            shift
            env_file="$1"
            seen_env="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once or both $1 and --no-env - see $script_name --help"
            exit 1
        fi
        ;;
    --no-env)
        if [ -z "$seen_env" ]; then
            source_command="echo 'Not sourcing environment'"
            seen_env="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once or both $1 and --env-file - see $script_name --help"
            exit 1
        fi
        ;;
    -p|--package)
        if [ -z "$package_name" ]; then
            shift
            package_name="$1"
            package_arg="--only-pkg-with-deps $package_name"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -o|--only)
        if [ -z "$package_name" ]; then
            shift
            if echo "$1" | grep -q -e ","; then
                package_name="$(echo "$1" | sed 's/,/;/g')"
                package_arg="-DCATKIN_WHITELIST_PACKAGES='$package_name'"
            elif echo "$1" | grep -q -e ":"; then
                package_name="$(echo $1 | cut -d ':' -f 1)"
                file_name="$(echo $1 | cut -d ':' -f 2)"
            else
                package_name="$1"
                package_arg="-DCATKIN_WHITELIST_PACKAGES=$package_name"
            fi
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    -t|--tests)
        if [ -z "$test_target" ]; then
            shift
            # If the next arg is another flag or if we are at end of args
            if [[ "$1" =~ ^- ]] || [ -z "$1" ]; then
                test_target="run_tests_"
            else
                test_target="$1"
                shift
            fi
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --no-colour|--no-color)
        if [ -z "$no_colour" ]; then
            shift
            no_colour="--no-color"
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --less)
        if [ -z "$less_cmd" ]; then
            shift
            catkin_suffix=" > /tmp/sbuild.out &"
            less_cmd="less /tmp/sbuild.out; rm -f /tmp/sbuild.out"
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --dry-run)
        if [ -z "$seen_debug" ]; then
            do_dryrun="true"
            seen_debug="yes"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --verbose)
        if [ -z "$verbose" ]; then
            verbose="true"
            shift
        else
            >&2 echo "Can't specify $1 more than once - see $script_name --help"
            exit 1
        fi
        ;;
    --help)
        print_help
        exit 0
        ;;
    *)    # unknown option
        >&2 echo "Unknown option $key"
        exit 1
        ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z "$package_name" ] && [ -n "$test_target" ]; then
    if [ "$test_target" == "run_tests_" ]; then
        >&2 echo "--tests without an argument must be paired with --package {packagename}"
        exit 1
    fi
fi

if [ -z "$gcc" ]; then
	gcc=10
fi

if [ "$test_target" == "run_tests_" ]; then
    test_target="${test_target}${package_name}"
fi

if [ -z "$source_command" ]; then
    source_command="if [ -f ${env_file} ]; then echo Sourcing ${env_file}; source ${env_file}; else echo 'Could not source file ${env_file}'; exit 1; fi"
fi
cd_command="cd $HOME/swarmbot4/swarmbot_ws"
set_c_and_cxx_compiler="export CC='ccache gcc-${gcc}'; export CXX='ccache g++-${gcc}'"
set_ccache_prefix="export CCACHE_PREFIX=distcc"
set_distcc_file="echo -e \"${hosts}\" | tee ~/.distcc/hosts"

if [ -z "$package_arg" ]; then
    package_arg="-DCATKIN_WHITELIST_PACKAGES="""
fi

if [ -n "$verbose" ]; then
    catkin_verbose="-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
else
    catkin_verbose="-DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF"
fi

build_folder="build/${cmake_type}"

catkin_command="ROS_LANG_DISABLE=genlisp catkin_make --build ${build_folder} ${no_colour} ${package_arg} -j${cores} ${install} ${catkin_verbose} -DCMAKE_BUILD_TYPE=${cmake_type} ${test_target}"

if [ -n "$file_name" ]; then
    if [ -n "$install" ]; then
        >&2 echo "Can't do a single file build with install"
        exit 1
    fi

    file_src="$HOME/swarmbot4/swarmbot_ws/src/${package_name}/src/${file_name}"
    file_any="$HOME/swarmbot4/swarmbot_ws/src/${package_name}/${file_name}"

    if [ -n "$verbose" ]; then
        make_verbose="VERBOSE=1 "
    fi

    if [ -f $file_src ]; then
        catkin_command="${make_verbose}make -f build/${package_name}/Makefile src/${file_name}.o"
    elif [ -f $file_any ]; then
        catkin_command="${make_verbose}make -f build/${package_name}/Makefile ${file_name}.o"
    else
        >&2 echo "Can't find file with path ${file_src} or ${file_any}"
        exit 1
    fi
fi

final_command="${source_command}; ${cd_command}; ${set_distcc_file}; ${set_c_and_cxx_compiler}; ${set_ccache_prefix}; ${catkin_command}"


if [ -z "$do_dryrun" ]; then
    if [ -n "$less_cmd" ]; then
        sudo machinectl shell ${user}@${container_name} \
            /bin/bash -c "${final_command}" ${catkin_suffix}
        catkin_pid=$!

        $less_cmd

        kill $catkin_pid
    else
#        sudo machinectl shell ${user}@${container_name} \

        sudo systemd-run --machine dev-focal --pty --uid 1000 --gid 1000 \
            /bin/bash -c "${final_command}"
    fi
else
    echo "Would do"
    echo ""
    echo "${final_command}"
fi

